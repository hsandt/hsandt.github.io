<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

<title>Long Nguyen Huu</title>
<subtitle>The personal website of Long Nguyen Huu aka komehara</subtitle>
<link href="/atom.xml" rel="self"/>
<link href="https://hsandt.github.io/"/>
<updated>2025-04-23T12:02:32+00:00</updated>
<id>https://hsandt.github.io</id>
<author>
<name>Long Nguyen Huu</name>
<email>n.huu.long@gmail.com</email>
</author>


    

    

    

    

    

    

    
    <entry>
        <title>C++ 2D Game Engine – Postmortem</title>
        <link href="https://hsandt.github.io/devlog/2019/05/24/c++-2d-game-engine-postmortem.html"/>
        <updated>2019-05-24T00:00:00+00:00</updated>
        <id>https://hsandt.github.io/devlog/2019/05/24/c++-2d-game-engine-postmortem</id>
        <category term="devlog" />
        <content type="html"><![CDATA[<p>4 years ago, I started working on a custom 2D game engine in C++. At the beginning, I needed a simple game to experiment AI techniques with, but I ended up working on a small engine (I still wanted to train AI to I moved that project to Unity).</p>

<p>The main features I am aiming at are:</p>

<ul>
  <li>Entity-component system</li>
  <li>Fixed update and input/render update loops</li>
  <li>Game window with OpenGL with <a href="http://glew.sourceforge.net/" target="_blank">GLEW</a> + <a href="http://www.glfw.org/" target="_blank">GLFW</a></li>
  <li>Keyboard/mouse input</li>
  <li>Primitive 2D shapes rendering</li>
  <li>Basic shaders</li>
  <li>2D physics (<a href="http://box2d.org/" target="_blank">Box2D</a>)</li>
  <li>Scene-Entity system</li>
  <li>Scene editor and basic scene serialization</li>
  <li>AI helpers</li>
  <li>Unit tests (<a href="https://github.com/catchorg/Catch2" target="_blank">Catch2</a>)</li>
  <li>Sample game</li>
</ul>

<p>At first I used <a href="https://www.libsdl.org/index.php" target="_blank">SDL2</a> for window management and rendering, before switching to OpenGL with GLFW for more flexibility (e.g. zooming in and out with the camera). Now, I know that SDL2 supports OpenGL rendering too, so looking back at it, SDL2 wasn’t a bad choice at all (plus I’m still only rendering simple shapes like squares right now).</p>

<p>That said, I like GLFW’s window API better and I need some OpenGL training anyway, so why not start with simple shapes. Next time, I’ll also have a look at <a href="http://www.sfml-dev.org/" target="_blank">SFML</a>, but for now I want to focus on the engine systems (modules).</p>

<h2 id="progress">Progress</h2>

<p>I have implemented the <strong>game application window</strong>, basic <strong>keyboard input</strong> and basic <strong>rendering</strong> systems, as well as a simple <strong>entity-component</strong> system with a base Actor class for game objects, a base Component class for components and their respective <strong>factories</strong>. Input and rendering is done via Components, but the developer can also add custom behavior by subclassing the Actor class for all game, as in Unreal Engine (and Godot with <em>Nodes</em>).</p>

<p><strong>Advantage</strong>: you can implement behavior specific to one entity directly inside the Actor subclass, without using components</p>

<p><strong>Disadvantage</strong>: all game objects don’t have the same exact type and have different sizes, so you cannot put them in an array/vector of GameObjects (Unity-style) combined with <a href="http://gamesfromwithin.com/managing-data-relationships">handles</a> for maximum cache efficiency (see <a href="http://gameprogrammingpatterns.com/data-locality.html">Data Locality</a>). If you still want data contiguity, you’ll need a custom container that supports variable object size.</p>

<p>For now, I have something like this:</p>

<p><img src="/assets/pictures/blog/devlog/2019-05-24-c++-2d-game-engine-postmortem/Red-squares.png" alt="Three red squares drawn on a dark blue background" /></p>

<figcaption>Primitive rendering with Stealth Engine</figcaption>

<p><img src="/assets/pictures/blog/devlog/2019-05-24-c++-2d-game-engine-postmortem/Box2D-box-collision-demo.gif" alt="A red square controlled by the player is pushing another one" /></p>

<figcaption>Demonstration of Box2D collision in Stealth Engine (player controls right square)</figcaption>

<p>The last thing I have done is refactoring the engine structure with a lot of interfaces to allow unit testing.</p>

<p>You can check the code on my GitHub repos:</p>

<ul>
  <li><a href="https://github.com/hsandt/Stealth-Engine/tree/develop">Engine</a></li>
  <li><a href="https://github.com/hsandt/Stealth-Engine-sample-game/tree/develop">Sample “game”</a> (it uses the engine as submodule)</li>
</ul>

<h2 id="next-step">Next step</h2>

<p>I’m not working on this project right now, but I’ll have to go back to it at some point, especially if I want to make an engine in a different language (e.g. Rust). This would be an opportunity to learn from my past mistakes and clean things up before I step onto a cleaner architecture.</p>
]]></content>
    </entry>
    

    

    
    <entry>
        <title>Screen Debug Message macros for Unreal Engine</title>
        <link href="https://hsandt.github.io/devlog/2017/01/23/screen-debug-message-macros-for-unreal-engine.html"/>
        <updated>2017-01-23T00:00:00+00:00</updated>
        <id>https://hsandt.github.io/devlog/2017/01/23/screen-debug-message-macros-for-unreal-engine</id>
        <category term="devlog" />
        <content type="html"><![CDATA[<p><em>Note: this post has been moved from my old website. It is about UE4 and has not been tested for UE5, however UE5 documentation shows that AddOnScreenDebugMessage’s signature has not changed. Content has been adjusted to fix dead links and update links to their redirection, such as UE4 doc -&gt; UE5 doc.</em></p>

<p>For all my Unreal projects, I insert a small header containing debugging utility, especially for printing on screen.</p>

<h1 id="code">Code</h1>

<p>First, I defined a bunch of macros to print debug messages on screen. The code is based on <a href="https://unrealcommunity.wiki/logs-printing-messages-to-yourself-during-runtime-n5ifosqc">Logs, Printing Messages To Yourself During Runtime</a> and uses <a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Engine/UEngine/AddOnScreenDebugMessage">AddOnScreenDebugMessage</a></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="cp">#pragma once
</span>
<span class="cp">#include</span> <span class="cpf">"EngineGlobals.h"</span><span class="cp">
#include</span> <span class="cpf">"Engine/Engine.h"</span><span class="cp">
</span>
<span class="cp">#define print(text)                         if (GEngine) GEngine-&gt;AddOnScreenDebugMessage(-1, 1.5f, FColor::White, TEXT(text), false)
#define printc(channel, text)               if (GEngine) GEngine-&gt;AddOnScreenDebugMessage(channel, 1.5f, FColor::White, TEXT(text))
#define printf(format, ...)                 if (GEngine) GEngine-&gt;AddOnScreenDebugMessage(-1, 1.5f, FColor::White, FString::Printf(TEXT(format), ##__VA_ARGS__), false)
#define printcf(channel, format, ...)       if (GEngine) GEngine-&gt;AddOnScreenDebugMessage(channel, 1.5f, FColor::White, FString::Printf(TEXT(format), ##__VA_ARGS__))
</span>
<span class="cp">#define printwarn(text)                     if (GEngine) GEngine-&gt;AddOnScreenDebugMessage(-1, 1.5f, FColor::Yellow, TEXT(text), false)
#define printcwarn(channel, text)           if (GEngine) GEngine-&gt;AddOnScreenDebugMessage(channel, 1.5f, FColor::Yellow, TEXT(text))
#define printfwarn(format, ...)             if (GEngine) GEngine-&gt;AddOnScreenDebugMessage(-1, 1.5f, FColor::Yellow, FString::Printf(TEXT(format), ##__VA_ARGS__), false)
#define printcfwarn(channel, format, ...)   if (GEngine) GEngine-&gt;AddOnScreenDebugMessage(channel, 1.5f, FColor::Yellow, FString::Printf(TEXT(format), ##__VA_ARGS__))
</span>
<span class="cp">#define printerr(text)                      if (GEngine) GEngine-&gt;AddOnScreenDebugMessage(-1, 1.5f, FColor::Red, TEXT(text), false)
#define printcerr(channel, text)            if (GEngine) GEngine-&gt;AddOnScreenDebugMessage(channel, 1.5f, FColor::Red, TEXT(text))
#define printferr(format, ...)              if (GEngine) GEngine-&gt;AddOnScreenDebugMessage(-1, 1.5f, FColor::Red, FString::Printf(TEXT(format), ##__VA_ARGS__), false)
#define printcferr(channel, format, ...)    if (GEngine) GEngine-&gt;AddOnScreenDebugMessage(channel, 1.5f, FColor::Red, FString::Printf(TEXT(format), ##__VA_ARGS__))
</span>
<span class="cp">#define printfloat(variable)                if (GEngine) GEngine-&gt;AddOnScreenDebugMessage(-1, 1.5f, FColor::Cyan, FString::Printf(TEXT(#variable ": %f"), variable), false)
#define printcfloat(channel, variable)      if (GEngine) GEngine-&gt;AddOnScreenDebugMessage(channel, 1.5f, FColor::Cyan, FString::Printf(TEXT(#variable ": %f"), variable))
</span>
<span class="cp">#define printvector(variable)               if (GEngine) GEngine-&gt;AddOnScreenDebugMessage(-1, 1.5f, FColor::Green, FString::Printf(TEXT(#variable ": %s"), *variable.ToCompactString()), false)
#define printcvector(channel, variable)     if (GEngine) GEngine-&gt;AddOnScreenDebugMessage(channel, 1.5f, FColor::Green, FString::Printf(TEXT(#variable ": %s"), *variable.ToCompactString()))
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>There are multiple versions for each define because I wanted to support channels and string formats.</p>

<p>A message printed on a channel will override any previous message on the same channel, whereas a message not printed on a channel (-1) will always be printed as a new message.</p>

<p>String formats are very convenient for debugging, just remember to pass <code class="language-plaintext highlighter-rouge">*TCHAR</code> arguments to Printf by calling the <code class="language-plaintext highlighter-rouge">operator*</code> on the FString you want to display (variadic arguments, a float or a vector converted to a string). Note that I use FVector::ToCompactString() instead of ToString() to display 2 decimals instead of 3, but your mileage may vary.</p>

<p><code class="language-plaintext highlighter-rouge">#variable</code> allows me to print the name of the variable or expression in front of its value. The fallback is that you shouldn’t type expressions that are too long.</p>

<p>In the other defines, the <code class="language-plaintext highlighter-rouge">##</code> before <code class="language-plaintext highlighter-rouge">__VA_ARGS__</code> will make sure the last comma will be stripped out of Printf arguments if no argument is passed along a format, although it is not required when using variadic macros in C++ (see <a href="https://gcc.gnu.org/onlinedocs/cpp/Variadic-Macros.html">Variadic Macros</a>). Since the format version of each method (<code class="language-plaintext highlighter-rouge">printf</code>, <code class="language-plaintext highlighter-rouge">printcf</code>, <code class="language-plaintext highlighter-rouge">printfwarn</code>, etc.) supports 0 extra arguments, you may get rid of the non-format versions (<code class="language-plaintext highlighter-rouge">print</code>, <code class="language-plaintext highlighter-rouge">printc</code>, <code class="language-plaintext highlighter-rouge">printwarn</code>, etc.) and rely entirely on the format versions.</p>

<p>I also pass <code class="language-plaintext highlighter-rouge">false</code> as the 5th parameter of AddOnScreenDebugMessage, bNewerOnTop, so that new messages are printed toward the bottom of the screen. Again, you may prefer the opposite option (in this case, don’t pass a 5th argument at all, since the default is true).</p>

<h1 id="demo">Demo</h1>

<p><img src="/assets/pictures/blog/devlog/2017-01-23/UE4-Screen-Debug-Actor-location.jpg" alt="UE4 Screen Debug - Actor location" /></p>

<figcaption>Actor location debug message is continuously updated</figcaption>

<p><img src="/assets/pictures/blog/devlog/2017-01-23/UE4-Screen-Debug-Switched-view-to-first-person.jpg" alt="UE4 Screen Debug - Switched view to first person" /></p>

<figcaption>Debug messages after switching view to first person</figcaption>

<p><img src="/assets/pictures/blog/devlog/2017-01-23/UE4-Screen-Debug-Switched-view-to-third-person.jpg" alt="UE4 Screen Debug - Switched view to third person" /></p>

<figcaption>Debug messages after switching view to third person</figcaption>

<h1 id="going-further">Going further</h1>

<p>I am still prototyping my new game, but when I enter production I will probably want to strip out the debugging calls of my non-dev builds. I will probably add conditional macros such as</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="cp">#if UE_BUILD_DEBUG
</span>    <span class="c1">// defines here</span>
    <span class="c1">// ...</span>
<span class="cp">#else
</span>    <span class="c1">// empty defines here</span>
    <span class="cp">#define print(text)
</span>    <span class="c1">// ...</span>
<span class="cp">#endif
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Also check out <a href="https://forums.unrealengine.com/showthread.php?57154-New-Wiki-How-to-Get-a-UE4-FString-of-Calling-Class-Function-and-Line-Number-Rama&amp;p=210060&amp;viewfull=1">Rama’s post</a> to prepend the function name and line to the message.</p>
]]></content>
    </entry>
    

    

    


</feed>